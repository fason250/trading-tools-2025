//@version=5
indicator('MTF Smart Money Trading System - Active Trader Edition', 'MTF-SMC-ACTIVE', overlay=true, max_boxes_count=500, max_lines_count=500, max_labels_count=500)

// ═════════════════════════════════════════════════════════════════════════════
// VERSION & CHANGELOG
// ═════════════════════════════════════════════════════════════════════════════
// v2.0.0 - Active Trader Edition
// - Added 6 new trading modes (all OFF by default)
// - Dual structure system (Major + Internal)
// - Relaxed HTF mode for more opportunities
// - Per-mode statistics and limits
// - Backwards compatible with v1.x (Compatibility Mode ON by default)

// ═════════════════════════════════════════════════════════════════════════════
// INPUTS - Your Trading Config
// ═════════════════════════════════════════════════════════════════════════════

// Timeframes
htf1 = input.timeframe('60', 'HTF 1 (1H)', group='🕐 Timeframes')
htf2 = input.timeframe('240', 'HTF 2 (4H)', group='🕐 Timeframes')
htf3 = input.timeframe('D', 'HTF 3 (Daily)', group='🕐 Timeframes')

// Structure Settings
swingLength = input.int(25, 'Major Structure Length', minval=10, maxval=50, group='📊 Structure', tooltip='Major swings for Pro Sniper')
swingLenInternal = input.int(12, 'Internal Structure Length', minval=5, maxval=25, group='📊 Structure', tooltip='Faster structure for Scalp/Reversal modes')
entryTF = input.timeframe('60', 'Entry Timeframe', group='📊 Structure', tooltip='1H or 15min for sniper entries')
showBOS = input.bool(true, 'Show BOS (Break of Structure)', group='📊 Structure')
showCHOCH = input.bool(true, 'Show CHoCH (Change of Character)', group='📊 Structure')
showEntry = input.bool(true, 'Show Entry Levels', group='📊 Structure')
biasMode = input.string('Majority (2/3) + Daily Anchor', 'Bias Mode', options=['Strict (3/3)', 'Majority (2/3) + Daily Anchor', 'Daily Only'], group='📊 Structure')
weeklyBlockBars = input.int(0, 'Block if Weekly Opp Change ≤ N bars', minval=0, maxval=20, group='📊 Structure')

// Order Blocks
showOB = input.bool(true, 'Show Order Blocks', group='📦 Order Blocks')
maxOB = input.int(3, 'Max Order Blocks to Show', minval=1, maxval=10, group='📦 Order Blocks')
obMitigation = input.string('High/Low', 'OB Mitigation Method', options=['Close', 'High/Low'], group='📦 Order Blocks')

// Fair Value Gaps
showFVG = input.bool(true, 'Show Fair Value Gaps', group='💎 FVG')
fvgColor = input.color(color.new(color.yellow, 80), 'FVG Color', group='💎 FVG')

// Display
showHTF1 = input.bool(true, 'Show 4H Levels', group='🎨 Display', inline='htf1')
htf1Color = input.color(color.new(color.blue, 30), '', group='🎨 Display', inline='htf1')
showHTF2 = input.bool(true, 'Show Daily Levels', group='🎨 Display', inline='htf2')
htf2Color = input.color(color.new(color.purple, 30), '', group='🎨 Display', inline='htf2')
showHTF3 = input.bool(true, 'Show Weekly Levels', group='🎨 Display', inline='htf3')
htf3Color = input.color(color.new(color.orange, 30), '', group='🎨 Display', inline='htf3')
showZones = input.bool(true, 'Show Premium/Discount Zones', group='🎨 Display')

// Risk/Reward Settings - SNIPER SETUPS
rr1 = input.float(2.0, 'TP1 Risk:Reward (Sniper)', minval=1.0, step=0.5, group='🎯 Sniper Setups')
rr2 = input.float(3.0, 'TP2 Risk:Reward (Sniper)', minval=1.5, step=0.5, group='🎯 Sniper Setups')
rr3 = input.float(5.0, 'TP3 Risk:Reward (Sniper)', minval=2.0, step=0.5, group='🎯 Sniper Setups')
showTP3 = input.bool(true, 'Show TP3 (Swing Target)', group='🎯 Sniper Setups')
enableProSniper = input.bool(true, 'Enable Pro Sniper Mode', group='🎯 Sniper Setups', tooltip='Extreme unmitigated OB + Sweep + Displacement (FVG) + HTF bias')

// Pro Sniper Flexibility (Advanced)
groupProFlex = '🎯 Pro Sniper Flex'
proFlexActive = input.bool(false, 'Enable Pro Sniper Flexibility', group=groupProFlex, tooltip='Ease some Pro Sniper filters')
proRequireExtremeOB = input.bool(true, 'Require Extreme OB', group=groupProFlex)
proRequireLiqSweep = input.bool(true, 'Require Liquidity Sweep', group=groupProFlex)
proRequireFVG = input.bool(true, 'Require FVG Displacement', group=groupProFlex)
proMaxEntriesPerLeg = input.int(2, 'Max Entries Per Leg', minval=1, maxval=5, group=groupProFlex)

// Quick Setups - Zone Reactions
enableQuick = input.bool(true, 'Enable Quick Setups', group='⚡ Quick Setups', tooltip='Catch zone bounces with engulfing/rejection')
quickRR1 = input.float(1.5, 'Quick TP1 R:R', minval=1.0, step=0.25, group='⚡ Quick Setups')
quickRR2 = input.float(2.0, 'Quick TP2 R:R', minval=1.0, step=0.25, group='⚡ Quick Setups')
minWickRatio = input.float(0.6, 'Min Rejection Wick Ratio', minval=0.3, maxval=0.9, step=0.1, group='⚡ Quick Setups', tooltip='Wick must be 60% of candle')
requireEngulfing = input.bool(true, 'Require Engulfing', group='⚡ Quick Setups', tooltip='Stricter - only engulfing candles')
quickRequireBoth = input.bool(false, 'Require Engulfing AND Liquidity Sweep', group='⚡ Quick Setups')
quickUseOB = input.bool(true, 'Require In Matching OB', group='⚡ Quick Setups')
quickUseFVG = input.bool(false, 'Require Imbalance (FVG) on Entry Bar', group='⚡ Quick Setups')
quickMinBodyATR = input.float(0.6, 'Min Body as ATR multiple', minval=0.1, maxval=5.0, step=0.1, group='⚡ Quick Setups')
quickBoundaryPct = input.float(0.15, 'Max Distance from Zone Boundary (% of HTF range)', minval=0.01, maxval=0.5, step=0.01, group='⚡ Quick Setups')
quickCooldownBars = input.int(10, 'Cooldown Bars After Quick Trade', minval=0, maxval=500, group='⚡ Quick Setups')
quickMaxPerDay = input.int(3, 'Max Quick Trades per Day', minval=1, maxval=20, group='⚡ Quick Setups')

// Quick Setup Flexibility (Advanced)
groupQuickFlex = '⚡ Quick Setup Flex'
quickFlexActive = input.bool(false, 'Enable Quick Setup Flexibility', group=groupQuickFlex)
quickBoundaryPctAlt = input.float(0.25, 'Alternative Boundary %', minval=0.01, maxval=0.5, step=0.01, group=groupQuickFlex)
quickMinBodyATRAlt = input.float(0.5, 'Alternative Min Body ATR', minval=0.1, maxval=5.0, step=0.1, group=groupQuickFlex)
quickAllowPatternless = input.bool(false, 'Allow Patternless w/ Strong Displacement', group=groupQuickFlex)

// 💰 ACTIVE TRADING MODES (New!)
groupActive = '💰 ACTIVE TRADING MODES'
compatMode = input.bool(true, '🔒 Compatibility Mode (Preserve Legacy)', group=groupActive, tooltip='ON = Behaves exactly like v1.x. Turn OFF to use new modes.')
enableRelaxedHTF = input.bool(false, 'Relaxed HTF Mode (Daily+4H or Extremes)', group=groupActive, tooltip='Allows trades when Daily+4H align, ignoring Weekly')
allowMixedHTFReversal = input.bool(false, 'Allow Mixed HTF on Reversal Only', group=groupActive)
enableScalp = input.bool(false, '🔥 Scalp Mode (Trend Continuation)', group=groupActive)
enableReversal = input.bool(false, '🔄 Reversal Sniper (CHoCH + Retest)', group=groupActive)
enableMomentum = input.bool(false, '🌊 Momentum Continuation (Add-ons)', group=groupActive)
enableSRBounce = input.bool(false, '🧱 S/R Bounce (HTF Levels)', group=groupActive)
enableImbalance = input.bool(false, '⚖️ Imbalance Hunter (FVG Fill)', group=groupActive)
allowConcurrentSetups = input.bool(false, 'Allow Concurrent Setups', group=groupActive, tooltip='Allow Pro Sniper + one add-on simultaneously')

// Per-Mode Limits
scalpMaxPerDay = input.int(8, 'Scalp: Max per day', minval=1, maxval=20, group=groupActive)
scalpCooldown = input.int(5, 'Scalp: Cooldown (bars)', minval=1, maxval=50, group=groupActive)
scalpIgnoreHTF = input.bool(false, 'Scalp: Ignore HTF in strong trend', group=groupActive)
scalpOnlyTrendZones = input.bool(true, 'Scalp: Only in trend zones', group=groupActive)
scalpATRMult = input.float(1.5, 'Scalp: SL ATR Multiple', minval=1.0, maxval=3.0, step=0.1, group=groupActive)
scalpRR1 = input.float(1.5, 'Scalp: TP1 R:R', minval=1.0, step=0.25, group=groupActive)
scalpRR2 = input.float(2.2, 'Scalp: TP2 R:R', minval=1.0, step=0.25, group=groupActive)

revMaxPerDay = input.int(5, 'Reversal: Max per day', minval=1, maxval=20, group=groupActive)
revCooldown = input.int(10, 'Reversal: Cooldown (bars)', minval=1, maxval=50, group=groupActive)
revUseRSIDiv = input.bool(false, 'Reversal: Use RSI Divergence', group=groupActive)
revATRMult = input.float(1.5, 'Reversal: SL ATR Multiple', minval=1.0, maxval=3.0, step=0.1, group=groupActive)
revRR1 = input.float(2.0, 'Reversal: TP1 R:R', minval=1.0, step=0.25, group=groupActive)
revRR2 = input.float(3.0, 'Reversal: TP2 R:R', minval=1.0, step=0.25, group=groupActive)

momAddOnsPerLeg = input.int(3, 'Momentum: Max add-ons per leg', minval=1, maxval=5, group=groupActive)
momATRMult = input.float(1.4, 'Momentum: SL ATR Multiple', minval=1.0, maxval=3.0, step=0.1, group=groupActive)
momRR1 = input.float(1.8, 'Momentum: TP1 R:R', minval=1.0, step=0.25, group=groupActive)
momRR2 = input.float(2.5, 'Momentum: TP2 R:R', minval=1.0, step=0.25, group=groupActive)

srMaxPerDay = input.int(6, 'S/R: Max per day', minval=1, maxval=20, group=groupActive)
srCooldown = input.int(8, 'S/R: Cooldown (bars)', minval=1, maxval=50, group=groupActive)
srLookback = input.int(50, 'S/R: Lookback bars for levels', minval=20, maxval=200, group=groupActive)
srATRMult = input.float(1.0, 'S/R: SL ATR Multiple', minval=0.5, maxval=2.0, step=0.1, group=groupActive)
srRR1 = input.float(1.6, 'S/R: TP1 R:R', minval=1.0, step=0.25, group=groupActive)
srRR2 = input.float(2.0, 'S/R: TP2 R:R', minval=1.0, step=0.25, group=groupActive)

imbMaxPerDay = input.int(6, 'Imbalance: Max per day', minval=1, maxval=20, group=groupActive)
imbCooldown = input.int(6, 'Imbalance: Cooldown (bars)', minval=1, maxval=50, group=groupActive)
imbMinATR = input.float(1.5, 'Imbalance: Min FVG size (ATR)', minval=1.0, maxval=3.0, step=0.1, group=groupActive)
imbAllowOverride = input.bool(false, 'Imbalance: Allow HTF override', group=groupActive)
imbATRMult = input.float(1.5, 'Imbalance: SL ATR Multiple', minval=1.0, maxval=3.0, step=0.1, group=groupActive)
imbRR1 = input.float(1.8, 'Imbalance: TP1 R:R', minval=1.0, step=0.25, group=groupActive)
imbRR2 = input.float(2.8, 'Imbalance: TP2 R:R', minval=1.0, step=0.25, group=groupActive)

// Alerts
showAlerts = input.bool(true, 'Show Entry Alerts', group='🔔 Alerts')
trackWinRate = input.bool(true, 'Track Win Rate', group='🔔 Alerts', tooltip='Show historical win rate on this pair')

// ═════════════════════════════════════════════════════════════════════════════
// TYPES - Data Structures
// ═════════════════════════════════════════════════════════════════════════════

type OrderBlock
    float top
    float bottom
    int startTime
    bool isBullish
    bool mitigated
    box display
    bool isExtreme

type FVG
    float top
    float bottom
    int startTime
    bool isBullish
    bool filled
    box display
    float gapSize

type Structure
    float level
    int barTime
    int barIndex
    bool isBullish
    bool crossed
    string label

type HTFData
    float high
    float low
    float close
    float open
    int time
    bool bullish

type TradeSetup
    float entry
    float sl
    float tp1
    float tp2
    float tp3
    bool isBullish
    int setupBar
    string quality
    float winProb
    bool active
    bool isQuick
    string setupType
    string modeName
    int parentLegId
    int addOnIndex
    line entryLine
    line slLine
    line tp1Line
    line tp2Line
    line tp3Line
    label setupLabel
    box riskBox
    box rewardBox1
    box rewardBox2
    box rewardBox3
    box progressBox
    bool movedToBE
    label tp1Tag
    label tp2Tag
    label tp3Tag

type ModeStats
    int totalSetups
    int wonSetups
    int todayCount
    int lastBar
    float winRate

// ═════════════════════════════════════════════════════════════════════════════
// CORE FUNCTIONS - The Real SMC Logic
// ═════════════════════════════════════════════════════════════════════════════

// Detect current market leg (bullish or bearish)
getLeg(length) =>
    var leg = 0
    highBreak = high[length] > ta.highest(high, length)
    lowBreak = low[length] < ta.lowest(low, length)
    
    if highBreak
        leg := 0  // Bearish leg
    else if lowBreak
        leg := 1  // Bullish leg
    leg

// Get HTF data with proper structure
getHTFData(tf) =>
    [h, l, c, o, t] = request.security(syminfo.tickerid, tf, [high[1], low[1], close[1], open[1], time[1]], lookahead=barmerge.lookahead_on)
    htfData = HTFData.new()
    htfData.high := h
    htfData.low := l
    htfData.close := c
    htfData.open := o
    htfData.time := t
    htfData.bullish := c > o
    htfData

// Detect Fair Value Gap (3-candle imbalance) - Enhanced with size tracking
detectFVG() =>
    var array<FVG> fvgArray = array.new<FVG>()
    
    // Bullish FVG: Current low > 2 candles ago high
    bullishFVG = low > high[2] and close > high[2] and close[1] > high[2]
    
    // Bearish FVG: Current high < 2 candles ago low
    bearishFVG = high < low[2] and close < low[2] and close[1] < low[2]
    
    if bullishFVG and showFVG
        fvg = FVG.new()
        fvg.top := low
        fvg.bottom := high[2]
        fvg.gapSize := low - high[2]
        fvg.startTime := time[1]
        fvg.isBullish := true
        fvg.filled := false
        fvg.display := box.new(time[1], low, time, high[2], xloc=xloc.bar_time, bgcolor=color.new(color.green, 85), border_color=color.new(color.green, 60))
        fvgArray.push(fvg)
    
    if bearishFVG and showFVG
        fvg = FVG.new()
        fvg.top := low[2]
        fvg.bottom := high
        fvg.gapSize := low[2] - high
        fvg.startTime := time[1]
        fvg.isBullish := false
        fvg.filled := false
        fvg.display := box.new(time[1], low[2], time, high, xloc=xloc.bar_time, bgcolor=color.new(color.red, 85), border_color=color.new(color.red, 60))
        fvgArray.push(fvg)
    
    fvgArray

// Detect Order Block (the candle that caused the move)
findOrderBlock(pivotBar, isBullish) =>
    ob = OrderBlock.new(na, na, na, isBullish, false, na, true)
    
    if isBullish
        // Find last bearish candle before the swing low
        for i = pivotBar to pivotBar + 10
            if i < bar_index and close[i] < open[i]
                ob.top := high[i]
                ob.bottom := low[i]
                ob.startTime := time[i]
                ob.mitigated := false
                break
    else
        // Find last bullish candle before the swing high
        for i = pivotBar to pivotBar + 10
            if i < bar_index and close[i] > open[i]
                ob.top := high[i]
                ob.bottom := low[i]
                ob.startTime := time[i]
                ob.mitigated := false
                break
    ob

// Check if price is in discount, premium, or equilibrium
getZone(currentPrice, rangeHigh, rangeLow) =>
    priceRange = rangeHigh - rangeLow
    if currentPrice < rangeLow + (priceRange * 0.382)
        'DISCOUNT'
    else if currentPrice > rangeHigh - (priceRange * 0.382)
        'PREMIUM'
    else
        'EQUILIBRIUM'

// Calculate HTF position percentage
getHTFPositionPct(currentPrice, rangeHigh, rangeLow) =>
    priceRange = rangeHigh - rangeLow
    priceRange > 0 ? (currentPrice - rangeLow) / priceRange : 0.5

// ═════════════════════════════════════════════════════════════════════════════
// CANDLE PATTERN DETECTION
// ═════════════════════════════════════════════════════════════════════════════

// Detect Bullish Engulfing
isBullishEngulfing() =>
    bodySize = close - open
    prevBodySize = close[1] - open[1]
    close > open and close[1] < open[1] and close > open[1] and open < close[1] and bodySize > math.abs(prevBodySize)

// Detect Bearish Engulfing
isBearishEngulfing() =>
    bodySize = open - close
    prevBodySize = open[1] - close[1]
    close < open and close[1] > open[1] and close < open[1] and open > close[1] and bodySize > math.abs(prevBodySize)

// Detect Bullish Rejection (Hammer/Pin Bar)
isBullishRejection(wickRatio) =>
    bodySize = math.abs(close - open)
    lowerWick = (close > open ? open : close) - low
    totalRange = high - low
    totalRange > 0 and lowerWick / totalRange >= wickRatio and close > open and bodySize < totalRange * 0.4

// Detect Bearish Rejection (Shooting Star)
isBearishRejection(wickRatio) =>
    bodySize = math.abs(close - open)
    upperWick = high - (close > open ? close : open)
    totalRange = high - low
    totalRange > 0 and upperWick / totalRange >= wickRatio and close < open and bodySize < totalRange * 0.4

// Liquidity Sweep Detection
isBullishLiquiditySweep() =>
    low < ta.lowest(low[1], 5) and close > open and close > low + (high - low) * 0.6

isBearishLiquiditySweep() =>
    high > ta.highest(high[1], 5) and close < open and close < high - (high - low) * 0.6

// Color scheme
bullColor = color.new(color.green, 0)
bearColor = color.new(color.red, 0)
bullColorTrans = color.new(color.green, 80)
bearColorTrans = color.new(color.red, 80)

// ═════════════════════════════════════════════════════════════════════════════
// SHARED INDICATORS (Calculated once, reused across modes)
// ═════════════════════════════════════════════════════════════════════════════

atr14 = ta.atr(14)
ema20 = ta.ema(close, 20)
ema50 = ta.ema(close, 50)
rsi14 = ta.rsi(close, 14)

// ═════════════════════════════════════════════════════════════════════════════
// MAIN LOGIC - Structure Detection (Dual Structure System)
// ═════════════════════════════════════════════════════════════════════════════

// Structure tracking - MAJOR (existing, for Pro Sniper)
var Structure swingHigh = Structure.new(na, na, na, false, false, '')
var Structure swingLow = Structure.new(na, na, na, true, false, '')
var int trend = 0  // 1 = bullish, -1 = bearish, 0 = neutral
var int legId = 0
var int proEntriesThisLeg = 0

// Structure tracking - INTERNAL (new, for Scalp/Reversal)
var Structure internalSwingHigh = Structure.new(na, na, na, false, false, '')
var Structure internalSwingLow = Structure.new(na, na, na, true, false, '')
var int internalTrend = 0
var int internalLegId = 0

// Order Blocks storage
var array<OrderBlock> bullishOBs = array.new<OrderBlock>()
var array<OrderBlock> bearishOBs = array.new<OrderBlock>()

// Trade tracking and win rate (global + per-mode)
var int totalSetups = 0
var int wonSetups = 0
var float winRate = 0.0
var TradeSetup currentSetup = na
var bool setupTriggered = false
var bool currentMovedToBE = false  // Track movedToBE separately for history access

// Per-mode statistics
var ModeStats statsScalp = ModeStats.new(0, 0, 0, na, 0.0)
var ModeStats statsReversal = ModeStats.new(0, 0, 0, na, 0.0)
var ModeStats statsMomentum = ModeStats.new(0, 0, 0, na, 0.0)
var ModeStats statsSR = ModeStats.new(0, 0, 0, na, 0.0)
var ModeStats statsImbalance = ModeStats.new(0, 0, 0, na, 0.0)
var int momAddOnsThisLeg = 0

// Quick setup tracking
var int lastQuickBar = na
var int lastDay = na
var int quickCountToday = 0

// Get HTF data
htf1Data = getHTFData(htf1)
htf2Data = getHTFData(htf2)
htf3Data = getHTFData(htf3)

// HTF Bias (Legacy calculation - preserved)
_dBull = htf2Data.bullish
_wBull = htf3Data.bullish
_h4Bull = htf1Data.bullish

var bool htfBullish = false
var bool htfBearish = false

// Weekly recent bias flip cool-off
weeklyBarsSinceFlip = request.security(syminfo.tickerid, htf3, ta.barssince(ta.change(close > open)))
weeklyRecentFlip = weeklyBlockBars > 0 and weeklyBarsSinceFlip >= 0 and weeklyBarsSinceFlip <= weeklyBlockBars

// Legacy HTF bias logic (unchanged when compatMode ON)
if biasMode == 'Strict (3/3)'
    htfBullish := _h4Bull and _dBull and _wBull
    htfBearish := not _h4Bull and not _dBull and not _wBull
else if biasMode == 'Daily Only'
    htfBullish := _dBull
    htfBearish := not _dBull
else
    // Majority 2/3 + Daily Anchor
    bullVotes = (_h4Bull ? 1 : 0) + (_dBull ? 1 : 0) + (_wBull ? 1 : 0)
    bearVotes = (not _h4Bull ? 1 : 0) + (not _dBull ? 1 : 0) + (not _wBull ? 1 : 0)
    htfBullish := _dBull and bullVotes >= 2
    htfBearish := not _dBull and bearVotes >= 2

// Apply weekly cool-off
if weeklyRecentFlip
    htfBullish := false
    htfBearish := false

// Store legacy values
legacyHTFBullish = htfBullish
legacyHTFBearish = htfBearish

// NEW: Relaxed HTF Mode (only if enabled and compatMode OFF)
highestHTF = math.max(htf1Data.high, htf2Data.high, htf3Data.high)
lowestHTF = math.min(htf1Data.low, htf2Data.low, htf3Data.low)
htfPosPct = getHTFPositionPct(close, highestHTF, lowestHTF)
inExtremeDiscount = htfPosPct <= 0.15
inExtremePremium = htfPosPct >= 0.85

if not compatMode and enableRelaxedHTF
    // Relaxed: Daily + 4H OR extreme position
    relaxedOK_long = (_dBull and _h4Bull) or inExtremeDiscount
    relaxedOK_short = (not _dBull and not _h4Bull) or inExtremePremium
    
    htfBullish := relaxedOK_long
    htfBearish := relaxedOK_short

htfMixed = not htfBullish and not htfBearish

// ═════════════════════════════════════════════════════════════════════════════
// MAJOR STRUCTURE DETECTION (Unchanged logic)
// ═════════════════════════════════════════════════════════════════════════════

currentLeg = getLeg(swingLength)
legChanged = ta.change(currentLeg)

if legChanged != 0
    legId += 1
    proEntriesThisLeg := 0
    momAddOnsThisLeg := 0
    
    if legChanged == -1  // New bearish leg = swing high
        swingHigh.level := high[swingLength]
        swingHigh.barTime := time[swingLength]
        swingHigh.barIndex := bar_index[swingLength]
        swingHigh.crossed := false
        swingHigh.label := swingHigh.level > swingHigh.level[1] ? 'HH' : 'LH'
        
        label.new(swingHigh.barIndex, swingHigh.level, swingHigh.label, 
             style=label.style_label_down, color=color.new(color.red, 30), textcolor=color.white, size=size.tiny, xloc=xloc.bar_index)
        
        if showOB
            ob = findOrderBlock(swingLength, false)
            if not na(ob.top)
                bearishOBs.push(ob)
                if bearishOBs.size() > maxOB
                    oldOB = bearishOBs.shift()
                    if not na(oldOB.display)
                        box.delete(oldOB.display)
    
    else if legChanged == 1  // New bullish leg = swing low
        swingLow.level := low[swingLength]
        swingLow.barTime := time[swingLength]
        swingLow.barIndex := bar_index[swingLength]
        swingLow.crossed := false
        swingLow.label := swingLow.level < swingLow.level[1] ? 'LL' : 'HL'
        
        label.new(swingLow.barIndex, swingLow.level, swingLow.label, 
             style=label.style_label_up, color=color.new(color.green, 30), textcolor=color.white, size=size.tiny, xloc=xloc.bar_index)
        
        if showOB
            ob = findOrderBlock(swingLength, true)
            if not na(ob.top)
                bullishOBs.push(ob)
                if bullishOBs.size() > maxOB
                    oldOB = bullishOBs.shift()
                    if not na(oldOB.display)
                        box.delete(oldOB.display)

// Detect BOS and CHoCH (MAJOR)
var label lastStructureLabel = na

// Bullish Break
if ta.crossover(close, swingHigh.level) and not swingHigh.crossed
    swingHigh.crossed := true
    
    structureType = trend == -1 ? 'CHoCH' : 'BOS'
    
    if (structureType == 'BOS' and showBOS) or (structureType == 'CHoCH' and showCHOCH)
        lastStructureLabel := label.new(bar_index, swingHigh.level, structureType, 
             style=label.style_label_down, color=bullColor, textcolor=color.white, size=size.small)
        line.new(swingHigh.barIndex, swingHigh.level, bar_index, swingHigh.level, 
             color=bullColor, style=line.style_dashed, xloc=xloc.bar_index)
    
    trend := 1

// Bearish Break
if ta.crossunder(close, swingLow.level) and not swingLow.crossed
    swingLow.crossed := true
    
    structureType = trend == 1 ? 'CHoCH' : 'BOS'
    
    if (structureType == 'BOS' and showBOS) or (structureType == 'CHoCH' and showCHOCH)
        lastStructureLabel := label.new(bar_index, swingLow.level, structureType, 
             style=label.style_label_up, color=bearColor, textcolor=color.white, size=size.small)
        line.new(swingLow.barIndex, swingLow.level, bar_index, swingLow.level, 
             color=bearColor, style=line.style_dashed, xloc=xloc.bar_index)
    
    trend := -1

// ═════════════════════════════════════════════════════════════════════════════
// INTERNAL STRUCTURE DETECTION (New for Scalp/Reversal)
// ═════════════════════════════════════════════════════════════════════════════

internalLeg = getLeg(swingLenInternal)
internalLegChanged = ta.change(internalLeg)

if internalLegChanged != 0
    internalLegId += 1
    
    if internalLegChanged == -1  // Internal swing high
        internalSwingHigh.level := high[swingLenInternal]
        internalSwingHigh.barTime := time[swingLenInternal]
        internalSwingHigh.barIndex := bar_index[swingLenInternal]
        internalSwingHigh.crossed := false
    
    else if internalLegChanged == 1  // Internal swing low
        internalSwingLow.level := low[swingLenInternal]
        internalSwingLow.barTime := time[swingLenInternal]
        internalSwingLow.barIndex := bar_index[swingLenInternal]
        internalSwingLow.crossed := false

// Internal BOS/CHoCH detection
if ta.crossover(close, internalSwingHigh.level) and not internalSwingHigh.crossed
    internalSwingHigh.crossed := true
    internalTrend := 1

if ta.crossunder(close, internalSwingLow.level) and not internalSwingLow.crossed
    internalSwingLow.crossed := true
    internalTrend := -1

// Calculate HTF range and current zone
currentZone = getZone(close, highestHTF, lowestHTF)

// FVG Detection
fvgArray = detectFVG()

// ═════════════════════════════════════════════════════════════════════════════
// DISPLAY HTF LEVELS (Unchanged)
// ═════════════════════════════════════════════════════════════════════════════

var line htf1HighLine = na
var line htf1LowLine = na
var label htf1HighLabel = na
var label htf1LowLabel = na

var line htf2HighLine = na
var line htf2LowLine = na
var label htf2HighLabel = na
var label htf2LowLabel = na

var line htf3HighLine = na
var line htf3LowLine = na
var label htf3HighLabel = na
var label htf3LowLabel = na

if barstate.islast
    if showHTF1
        line.delete(htf1HighLine)
        line.delete(htf1LowLine)
        label.delete(htf1HighLabel)
        label.delete(htf1LowLabel)
        
        htf1HighLine := line.new(htf1Data.time, htf1Data.high, time, htf1Data.high, xloc=xloc.bar_time, color=htf1Color, width=2, style=line.style_solid)
        htf1LowLine := line.new(htf1Data.time, htf1Data.low, time, htf1Data.low, xloc=xloc.bar_time, color=htf1Color, width=2, style=line.style_solid)
        htf1HighLabel := label.new(time, htf1Data.high, '4H HIGH', xloc=xloc.bar_time, style=label.style_label_left, color=htf1Color, textcolor=color.white, size=size.small)
        htf1LowLabel := label.new(time, htf1Data.low, '4H LOW', xloc=xloc.bar_time, style=label.style_label_left, color=htf1Color, textcolor=color.white, size=size.small)
    
    if showHTF2
        line.delete(htf2HighLine)
        line.delete(htf2LowLine)
        label.delete(htf2HighLabel)
        label.delete(htf2LowLabel)
        
        htf2HighLine := line.new(htf2Data.time, htf2Data.high, time, htf2Data.high, xloc=xloc.bar_time, color=htf2Color, width=2, style=line.style_dashed)
        htf2LowLine := line.new(htf2Data.time, htf2Data.low, time, htf2Data.low, xloc=xloc.bar_time, color=htf2Color, width=2, style=line.style_dashed)
        htf2HighLabel := label.new(time, htf2Data.high, 'DAILY HIGH', xloc=xloc.bar_time, style=label.style_label_left, color=htf2Color, textcolor=color.white, size=size.small)
        htf2LowLabel := label.new(time, htf2Data.low, 'DAILY LOW', xloc=xloc.bar_time, style=label.style_label_left, color=htf2Color, textcolor=color.white, size=size.small)
    
    if showHTF3
        line.delete(htf3HighLine)
        line.delete(htf3LowLine)
        label.delete(htf3HighLabel)
        label.delete(htf3LowLabel)
        
        htf3HighLine := line.new(htf3Data.time, htf3Data.high, time, htf3Data.high, xloc=xloc.bar_time, color=htf3Color, width=3, style=line.style_dotted)
        htf3LowLine := line.new(htf3Data.time, htf3Data.low, time, htf3Data.low, xloc=xloc.bar_time, color=htf3Color, width=3, style=line.style_dotted)
        htf3HighLabel := label.new(time, htf3Data.high, 'WEEKLY HIGH', xloc=xloc.bar_time, style=label.style_label_left, color=htf3Color, textcolor=color.white, size=size.normal)
        htf3LowLabel := label.new(time, htf3Data.low, 'WEEKLY LOW', xloc=xloc.bar_time, style=label.style_label_left, color=htf3Color, textcolor=color.white, size=size.normal)

// ═════════════════════════════════════════════════════════════════════════════
// DISPLAY ORDER BLOCKS (Unchanged)
// ═════════════════════════════════════════════════════════════════════════════

if showOB and barstate.islast
    for [i, ob] in bullishOBs
        if not na(ob.top)
            mitigationSource = obMitigation == 'Close' ? close : low
            
            if mitigationSource < ob.bottom
                ob.mitigated := true
                if not na(ob.display)
                    box.delete(ob.display)
            else
                if na(ob.display)
                    ob.display := box.new(ob.startTime, ob.top, time, ob.bottom, 
                         xloc=xloc.bar_time, bgcolor=bullColorTrans, border_color=bullColor, border_width=1)
                else
                    box.set_right(ob.display, time)

if showOB and barstate.islast
    for [i, ob] in bearishOBs
        if not na(ob.top)
            mitigationSource = obMitigation == 'Close' ? close : high
            
            if mitigationSource > ob.top
                ob.mitigated := true
                if not na(ob.display)
                    box.delete(ob.display)
            else
                if na(ob.display)
                    ob.display := box.new(ob.startTime, ob.top, time, ob.bottom, 
                         xloc=xloc.bar_time, bgcolor=bearColorTrans, border_color=bearColor, border_width=1)
                else
                    box.set_right(ob.display, time)

// ═════════════════════════════════════════════════════════════════════════════
// PREMIUM/DISCOUNT ZONES (Unchanged)
// ═════════════════════════════════════════════════════════════════════════════

var box premiumBox = na
var box discountBox = na
var box eqBox = na
var label premiumLabel = na
var label discountLabel = na

if showZones and barstate.islast
    box.delete(premiumBox)
    box.delete(discountBox)
    box.delete(eqBox)
    label.delete(premiumLabel)
    label.delete(discountLabel)
    
    priceRange = highestHTF - lowestHTF
    
    premium_top = highestHTF
    premium_bottom = highestHTF - (priceRange * 0.382)
    
    discount_top = lowestHTF + (priceRange * 0.382)
    discount_bottom = lowestHTF
    
    eq_top = premium_bottom
    eq_bottom = discount_top
    
    premiumBox := box.new(time - 50*timeframe.multiplier*60000, premium_top, time, premium_bottom, xloc=xloc.bar_time, border_color=color.new(color.red, 85), bgcolor=color.new(color.red, 92), border_width=1)
    discountBox := box.new(time - 50*timeframe.multiplier*60000, discount_top, time, discount_bottom, xloc=xloc.bar_time, border_color=color.new(color.green, 85), bgcolor=color.new(color.green, 92), border_width=1)
    eqBox := box.new(time - 50*timeframe.multiplier*60000, eq_top, time, eq_bottom, xloc=xloc.bar_time, border_color=color.new(color.gray, 93), bgcolor=color.new(color.gray, 96), border_width=1)
    
    premiumLabel := label.new(time, premium_top, 'PREMIUM (SELL ZONE)', xloc=xloc.bar_time, style=label.style_label_down, color=color.new(color.red, 20), textcolor=color.white, size=size.tiny)
    discountLabel := label.new(time, discount_bottom, 'DISCOUNT (BUY ZONE)', xloc=xloc.bar_time, style=label.style_label_up, color=color.new(color.green, 20), textcolor=color.white, size=size.tiny)

// ═════════════════════════════════════════════════════════════════════════════
// ZONE & STRUCTURE STATUS
// ═════════════════════════════════════════════════════════════════════════════

inBullishOB = false
inBearishOB = false

if bullishOBs.size() > 0
    for ob in bullishOBs
        if not ob.mitigated and close >= ob.bottom and close <= ob.top
            inBullishOB := true

if bearishOBs.size() > 0
    for ob in bearishOBs
        if not ob.mitigated and close >= ob.bottom and close <= ob.top
            inBearishOB := true

setupQuality = (currentZone == 'DISCOUNT' and htfBullish and trend == 1) or (currentZone == 'PREMIUM' and htfBearish and trend == -1) ? 'HIGH' : (currentZone != 'EQUILIBRIUM' and (htfBullish or htfBearish)) ? 'MEDIUM' : 'LOW'

conditionsMet = 0
if currentZone == 'DISCOUNT' or currentZone == 'PREMIUM'
    conditionsMet += 1
if htfBullish or htfBearish
    conditionsMet += 1
if trend == 1 or trend == -1
    conditionsMet += 1
if inBullishOB or inBearishOB
    conditionsMet += 1

winProbability = trackWinRate and totalSetups > 10 ? winRate : conditionsMet == 4 ? 75.0 : conditionsMet == 3 ? 65.0 : conditionsMet == 2 ? 50.0 : 35.0

// ═════════════════════════════════════════════════════════════════════════════
// SMC HELPER PREDICATES
// ═════════════════════════════════════════════════════════════════════════════

// Check if price in extreme OB
inExtremeOB_bull = false
inExtremeOB_bear = false

if bullishOBs.size() > 0
    for ob in bullishOBs
        if ob.isExtreme and not ob.mitigated and close >= ob.bottom and close <= ob.top
            inExtremeOB_bull := true

if bearishOBs.size() > 0
    for ob in bearishOBs
        if ob.isExtreme and not ob.mitigated and close >= ob.bottom and close <= ob.top
            inExtremeOB_bear := true

// Displacement detection (FVG + strong body)
displacementBull = false
displacementBear = false

if fvgArray.size() > 0
    recentFVG = fvgArray.get(fvgArray.size() - 1)
    bodyNow = math.abs(close - open)
    strongBody = atr14 > 0 and bodyNow >= 0.8 * atr14
    
    if recentFVG.isBullish and not recentFVG.filled and strongBody
        displacementBull := true
    else if not recentFVG.isBullish and not recentFVG.filled and strongBody
        displacementBear := true

// Check boundary proximity
priceRange_htf = highestHTF - lowestHTF
premium_bottom_boundary = highestHTF - (priceRange_htf * 0.382)
discount_top_boundary = lowestHTF + (priceRange_htf * 0.382)

boundaryDistBuy = priceRange_htf > 0 ? (discount_top_boundary - close) / priceRange_htf : 0.0
boundaryOKBuy = boundaryDistBuy >= 0 and boundaryDistBuy <= quickBoundaryPct

boundaryDistSell = priceRange_htf > 0 ? (close - premium_bottom_boundary) / priceRange_htf : 0.0
boundaryOKSell = boundaryDistSell >= 0 and boundaryDistSell <= quickBoundaryPct

// Deep zone detection
htfPos = getHTFPositionPct(close, highestHTF, lowestHTF)
deepDiscount = htfPos < 0.236
deepPremium = htfPos > 0.764

// ═════════════════════════════════════════════════════════════════════════════
// DAILY COUNTER RESET
// ═════════════════════════════════════════════════════════════════════════════

if ta.change(time('D'))
    quickCountToday := 0
    statsScalp.todayCount := 0
    statsReversal.todayCount := 0
    statsSR.todayCount := 0
    statsImbalance.todayCount := 0

// ═════════════════════════════════════════════════════════════════════════════
// TRADE MANAGEMENT - Update Active Setups
// ═════════════════════════════════════════════════════════════════════════════

if not na(currentSetup)
    if currentSetup.active
        // Update visual extensions
        if not na(currentSetup.entryLine)
            line.set_x2(currentSetup.entryLine, bar_index)
        if not na(currentSetup.slLine)
            line.set_x2(currentSetup.slLine, bar_index)
        if not na(currentSetup.tp1Line)
            line.set_x2(currentSetup.tp1Line, bar_index)
        if not na(currentSetup.tp2Line)
            line.set_x2(currentSetup.tp2Line, bar_index)
        if not na(currentSetup.tp3Line)
            line.set_x2(currentSetup.tp3Line, bar_index)
        
        // Update boxes
        if not na(currentSetup.riskBox)
            box.set_right(currentSetup.riskBox, bar_index)
        if not na(currentSetup.rewardBox1)
            box.set_right(currentSetup.rewardBox1, bar_index)
        if not na(currentSetup.rewardBox2)
            box.set_right(currentSetup.rewardBox2, bar_index)
        if not na(currentSetup.rewardBox3)
            box.set_right(currentSetup.rewardBox3, bar_index)
        
        // Update progress box
        if not na(currentSetup.progressBox)
            box.delete(currentSetup.progressBox)
        
        progTop = math.max(currentSetup.entry, close)
        progBot = math.min(currentSetup.entry, close)
        progColor = currentSetup.isBullish ? (close >= currentSetup.entry ? color.new(color.green, 80) : color.new(color.red, 80)) : (close <= currentSetup.entry ? color.new(color.green, 80) : color.new(color.red, 80))
        currentSetup.progressBox := box.new(currentSetup.setupBar, progTop, bar_index, progBot, xloc=xloc.bar_index, bgcolor=progColor, border_color=color.new(color.gray, 50))
        
        // Check TP/SL hits
        if currentSetup.isBullish
            // Check SL first
            if low <= currentSetup.sl
                currentSetup.active := false
                totalSetups += 1
                currentSetup := na
                currentMovedToBE := false
            else
                // Only check TPs if SL not hit
                // Check TP3 first (highest priority)
                if not na(currentSetup.tp3) and high >= currentSetup.tp3
                    currentSetup.active := false
                    currentSetup := na
                    currentMovedToBE := false
                // Check TP2
                else if high >= currentSetup.tp2
                    wonSetups += 1
                    totalSetups += 1
                    currentSetup.active := false
                    winRate := totalSetups > 0 ? (wonSetups / totalSetups) * 100 : 0
                    currentSetup := na
                    currentMovedToBE := false
                // Check TP1 - only move to BE
                else if not currentSetup.movedToBE and high >= currentSetup.tp1
                    currentSetup.movedToBE := true
                    currentMovedToBE := true
                    // Move SL to BE
                    if not na(currentSetup.slLine)
                        line.set_y1(currentSetup.slLine, currentSetup.entry)
                        line.set_y2(currentSetup.slLine, currentSetup.entry)
        
        else  // Bearish
            // Check SL first
            if high >= currentSetup.sl
                currentSetup.active := false
                totalSetups += 1
                currentSetup := na
                currentMovedToBE := false
            else
                // Only check TPs if SL not hit
                // Check TP3 first (highest priority)
                if not na(currentSetup.tp3) and low <= currentSetup.tp3
                    currentSetup.active := false
                    currentSetup := na
                    currentMovedToBE := false
                // Check TP2
                else if low <= currentSetup.tp2
                    wonSetups += 1
                    totalSetups += 1
                    currentSetup.active := false
                    winRate := totalSetups > 0 ? (wonSetups / totalSetups) * 100 : 0
                    currentSetup := na
                    currentMovedToBE := false
                // Check TP1 - only move to BE
                else if not currentSetup.movedToBE and low <= currentSetup.tp1
                    currentSetup.movedToBE := true
                    currentMovedToBE := true
                    // Move SL to BE
                    if not na(currentSetup.slLine)
                        line.set_y1(currentSetup.slLine, currentSetup.entry)
                        line.set_y2(currentSetup.slLine, currentSetup.entry)

// ═════════════════════════════════════════════════════════════════════════════
// PRO SNIPER MODE - Full Confluence Setups
// ═════════════════════════════════════════════════════════════════════════════

if enableProSniper and not compatMode and na(currentSetup) and barstate.isconfirmed
    // BULLISH PRO SNIPER
    proLongConditions = htfBullish and currentZone == 'DISCOUNT' and trend == 1 and proEntriesThisLeg < proMaxEntriesPerLeg
    
    if proFlexActive
        proLongConditions := proLongConditions and ((not proRequireExtremeOB or inExtremeOB_bull) and (not proRequireLiqSweep or isBullishLiquiditySweep()) and (not proRequireFVG or displacementBull))
    else
        proLongConditions := proLongConditions and inExtremeOB_bull and isBullishLiquiditySweep() and displacementBull
    
    if proLongConditions
        entryPrice = close
        slPrice = swingLow.level * 0.998
        riskPips = entryPrice - slPrice
        
        if riskPips > 0
            tp1Price = entryPrice + (riskPips * rr1)
            tp2Price = entryPrice + (riskPips * rr2)
            tp3Price = showTP3 ? entryPrice + (riskPips * rr3) : na
            
            // Quality score
            qualityScore = 0
            if biasMode == 'Strict (3/3)' and htfBullish
                qualityScore += 2
            if inExtremeOB_bull
                qualityScore += 2
            if isBullishLiquiditySweep()
                qualityScore += 1
            if displacementBull
                qualityScore += 1
            if deepDiscount
                qualityScore += 1
            
            qualityLabel = qualityScore >= 6 ? 'HIGH' : qualityScore >= 4 ? 'MEDIUM' : 'LOW'
            
            // Create setup
            currentSetup := TradeSetup.new()
            currentMovedToBE := false
            currentSetup.entry := entryPrice
            currentSetup.sl := slPrice
            currentSetup.tp1 := tp1Price
            currentSetup.tp2 := tp2Price
            currentSetup.tp3 := tp3Price
            currentSetup.isBullish := true
            currentSetup.setupBar := bar_index
            currentSetup.quality := qualityLabel
            currentSetup.winProb := winProbability
            currentSetup.active := true
            currentSetup.isQuick := false
            currentSetup.setupType := '🎯 PRO SNIPER'
            currentSetup.modeName := 'Pro'
            currentSetup.parentLegId := legId
            currentSetup.movedToBE := false
            
            // Draw visuals
            projWidth = 40
            currentSetup.entryLine := line.new(bar_index, entryPrice, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, color=color.white, width=2)
            currentSetup.slLine := line.new(bar_index, slPrice, bar_index + projWidth, slPrice, xloc=xloc.bar_index, color=bearColor, width=2, style=line.style_dashed)
            currentSetup.tp1Line := line.new(bar_index, tp1Price, bar_index + projWidth, tp1Price, xloc=xloc.bar_index, color=bullColor, width=1, style=line.style_dashed)
            currentSetup.tp2Line := line.new(bar_index, tp2Price, bar_index + projWidth, tp2Price, xloc=xloc.bar_index, color=bullColor, width=2, style=line.style_dashed)
            currentSetup.tp3Line := showTP3 and not na(tp3Price) ? line.new(bar_index, tp3Price, bar_index + projWidth, tp3Price, xloc=xloc.bar_index, color=bullColor, width=3) : na
            
            currentSetup.riskBox := box.new(bar_index, entryPrice, bar_index + projWidth, slPrice, xloc=xloc.bar_index, bgcolor=color.new(color.orange, 85), border_color=color.new(color.orange, 60))
            currentSetup.rewardBox1 := box.new(bar_index, tp1Price, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, bgcolor=color.new(color.green, 90), border_color=color.new(color.green, 70))
            currentSetup.rewardBox2 := box.new(bar_index, tp2Price, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, bgcolor=color.new(color.green, 92), border_color=color.new(color.green, 80))
            currentSetup.rewardBox3 := showTP3 and not na(tp3Price) ? box.new(bar_index, tp3Price, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, bgcolor=color.new(color.green, 94), border_color=color.new(color.green, 85)) : na
            
            currentSetup.tp1Tag := label.new(bar_index, tp1Price, 'TP1', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 60), textcolor=color.white, size=size.tiny)
            currentSetup.tp2Tag := label.new(bar_index, tp2Price, 'TP2', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 50), textcolor=color.white, size=size.tiny)
            currentSetup.tp3Tag := showTP3 and not na(tp3Price) ? label.new(bar_index, tp3Price, 'TP3', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 40), textcolor=color.white, size=size.tiny) : na
            
            labelText = '🎯 PRO BUY\n━━━━━━━━━━\nEntry: ' + str.tostring(entryPrice, '#.##') + '\nSL: ' + str.tostring(slPrice, '#.##') + '\nTP1: ' + str.tostring(tp1Price, '#.##') + ' (' + str.tostring(rr1) + 'R)\nTP2: ' + str.tostring(tp2Price, '#.##') + ' (' + str.tostring(rr2) + 'R)' + (showTP3 ? '\nTP3: ' + str.tostring(tp3Price, '#.##') + ' (' + str.tostring(rr3) + 'R)' : '') + '\nQuality: ' + qualityLabel
            currentSetup.setupLabel := label.new(bar_index, low, labelText, style=label.style_label_up, color=bullColor, textcolor=color.white, size=size.normal)
            
            proEntriesThisLeg += 1
    
    // BEARISH PRO SNIPER
    proShortConditions = htfBearish and currentZone == 'PREMIUM' and trend == -1 and proEntriesThisLeg < proMaxEntriesPerLeg
    
    if proFlexActive
        proShortConditions := proShortConditions and ((not proRequireExtremeOB or inExtremeOB_bear) and (not proRequireLiqSweep or isBearishLiquiditySweep()) and (not proRequireFVG or displacementBear))
    else
        proShortConditions := proShortConditions and inExtremeOB_bear and isBearishLiquiditySweep() and displacementBear
    
    if proShortConditions
        entryPrice = close
        slPrice = swingHigh.level * 1.002
        riskPips = slPrice - entryPrice
        
        if riskPips > 0
            tp1Price = entryPrice - (riskPips * rr1)
            tp2Price = entryPrice - (riskPips * rr2)
            tp3Price = showTP3 ? entryPrice - (riskPips * rr3) : na
            
            qualityScore = 0
            if biasMode == 'Strict (3/3)' and htfBearish
                qualityScore += 2
            if inExtremeOB_bear
                qualityScore += 2
            if isBearishLiquiditySweep()
                qualityScore += 1
            if displacementBear
                qualityScore += 1
            if deepPremium
                qualityScore += 1
            
            qualityLabel = qualityScore >= 6 ? 'HIGH' : qualityScore >= 4 ? 'MEDIUM' : 'LOW'
            
            currentSetup := TradeSetup.new()
            currentMovedToBE := false
            currentSetup.entry := entryPrice
            currentSetup.sl := slPrice
            currentSetup.tp1 := tp1Price
            currentSetup.tp2 := tp2Price
            currentSetup.tp3 := tp3Price
            currentSetup.isBullish := false
            currentSetup.setupBar := bar_index
            currentSetup.quality := qualityLabel
            currentSetup.winProb := winProbability
            currentSetup.active := true
            currentSetup.isQuick := false
            currentSetup.setupType := '🎯 PRO SNIPER'
            currentSetup.modeName := 'Pro'
            currentSetup.parentLegId := legId
            currentSetup.movedToBE := false
            
            projWidth = 40
            currentSetup.entryLine := line.new(bar_index, entryPrice, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, color=color.white, width=2)
            currentSetup.slLine := line.new(bar_index, slPrice, bar_index + projWidth, slPrice, xloc=xloc.bar_index, color=bearColor, width=2, style=line.style_dashed)
            currentSetup.tp1Line := line.new(bar_index, tp1Price, bar_index + projWidth, tp1Price, xloc=xloc.bar_index, color=bullColor, width=1, style=line.style_dashed)
            currentSetup.tp2Line := line.new(bar_index, tp2Price, bar_index + projWidth, tp2Price, xloc=xloc.bar_index, color=bullColor, width=2, style=line.style_dashed)
            currentSetup.tp3Line := showTP3 and not na(tp3Price) ? line.new(bar_index, tp3Price, bar_index + projWidth, tp3Price, xloc=xloc.bar_index, color=bullColor, width=3) : na
            
            currentSetup.riskBox := box.new(bar_index, slPrice, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, bgcolor=color.new(color.orange, 85), border_color=color.new(color.orange, 60))
            currentSetup.rewardBox1 := box.new(bar_index, entryPrice, bar_index + projWidth, tp1Price, xloc=xloc.bar_index, bgcolor=color.new(color.green, 90), border_color=color.new(color.green, 70))
            currentSetup.rewardBox2 := box.new(bar_index, entryPrice, bar_index + projWidth, tp2Price, xloc=xloc.bar_index, bgcolor=color.new(color.green, 92), border_color=color.new(color.green, 80))
            currentSetup.rewardBox3 := showTP3 and not na(tp3Price) ? box.new(bar_index, entryPrice, bar_index + projWidth, tp3Price, xloc=xloc.bar_index, bgcolor=color.new(color.green, 94), border_color=color.new(color.green, 85)) : na
            
            currentSetup.tp1Tag := label.new(bar_index, tp1Price, 'TP1', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 60), textcolor=color.white, size=size.tiny)
            currentSetup.tp2Tag := label.new(bar_index, tp2Price, 'TP2', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 50), textcolor=color.white, size=size.tiny)
            currentSetup.tp3Tag := showTP3 and not na(tp3Price) ? label.new(bar_index, tp3Price, 'TP3', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 40), textcolor=color.white, size=size.tiny) : na
            
            labelText = '🎯 PRO SELL\n━━━━━━━━━━\nEntry: ' + str.tostring(entryPrice, '#.##') + '\nSL: ' + str.tostring(slPrice, '#.##') + '\nTP1: ' + str.tostring(tp1Price, '#.##') + ' (' + str.tostring(rr1) + 'R)\nTP2: ' + str.tostring(tp2Price, '#.##') + ' (' + str.tostring(rr2) + 'R)' + (showTP3 ? '\nTP3: ' + str.tostring(tp3Price, '#.##') + ' (' + str.tostring(rr3) + 'R)' : '') + '\nQuality: ' + qualityLabel
            currentSetup.setupLabel := label.new(bar_index, high, labelText, style=label.style_label_down, color=bearColor, textcolor=color.white, size=size.normal)
            
            proEntriesThisLeg += 1

// ═════════════════════════════════════════════════════════════════════════════
// QUICK SETUP MODE - Zone Edge Reactions
// ═════════════════════════════════════════════════════════════════════════════

if enableQuick and not compatMode and na(currentSetup) and barstate.isconfirmed
    okCooldownQuick = na(lastQuickBar) or bar_index - lastQuickBar >= quickCooldownBars
    okDailyQuick = quickCountToday < quickMaxPerDay
    
    // BULLISH QUICK
    quickLongPre = currentZone == 'DISCOUNT' and boundaryOKBuy and trend == 1 and okCooldownQuick and okDailyQuick
    
    if quickLongPre
        hasEngulfing = isBullishEngulfing()
        hasRejection = isBullishRejection(minWickRatio)
        hasLiqSweep = isBullishLiquiditySweep()
        
        bodySize = math.abs(close - open)
        bodyOK = atr14 > 0 ? bodySize >= quickMinBodyATR * atr14 : true
        
        baseSignal = false
        if quickRequireBoth
            baseSignal := hasEngulfing and hasLiqSweep
        else if requireEngulfing
            baseSignal := hasEngulfing
        else
            baseSignal := hasEngulfing or (hasRejection and hasLiqSweep)
        
        quickLongCondition = baseSignal and bodyOK and (not quickUseOB or inBullishOB) and (not quickUseFVG or displacementBull)
        
        if quickLongCondition
            entryPrice = close
            slPrice = low - (high - low) * 0.2
            riskPips = entryPrice - slPrice
            
            if riskPips > 0
                tp1Price = entryPrice + (riskPips * quickRR1)
                tp2Price = entryPrice + (riskPips * quickRR2)
                
                currentSetup := TradeSetup.new()
                currentMovedToBE := false
                currentSetup.entry := entryPrice
                currentSetup.sl := slPrice
                currentSetup.tp1 := tp1Price
                currentSetup.tp2 := tp2Price
                currentSetup.tp3 := na
                currentSetup.isBullish := true
                currentSetup.setupBar := bar_index
                currentSetup.quality := '⚡ QUICK'
                currentSetup.winProb := 55.0
                currentSetup.active := true
                currentSetup.isQuick := true
                currentSetup.setupType := '⚡ QUICK'
                currentSetup.modeName := 'Quick'
                currentSetup.parentLegId := legId
                currentSetup.movedToBE := false
                
                projWidth = 30
                quickColor = color.new(color.yellow, 0)
                currentSetup.entryLine := line.new(bar_index, entryPrice, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, color=quickColor, width=2)
                currentSetup.slLine := line.new(bar_index, slPrice, bar_index + projWidth, slPrice, xloc=xloc.bar_index, color=bearColor, width=2, style=line.style_dashed)
                currentSetup.tp1Line := line.new(bar_index, tp1Price, bar_index + projWidth, tp1Price, xloc=xloc.bar_index, color=bullColor, width=1, style=line.style_dashed)
                currentSetup.tp2Line := line.new(bar_index, tp2Price, bar_index + projWidth, tp2Price, xloc=xloc.bar_index, color=bullColor, width=2, style=line.style_dashed)
                currentSetup.tp3Line := na
                
                currentSetup.riskBox := box.new(bar_index, entryPrice, bar_index + projWidth, slPrice, xloc=xloc.bar_index, bgcolor=color.new(color.orange, 85), border_color=color.new(color.orange, 60))
                currentSetup.rewardBox1 := box.new(bar_index, tp1Price, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, bgcolor=color.new(color.green, 90), border_color=color.new(color.green, 70))
                currentSetup.rewardBox2 := box.new(bar_index, tp2Price, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, bgcolor=color.new(color.green, 92), border_color=color.new(color.green, 80))
                currentSetup.rewardBox3 := na
                
                currentSetup.tp1Tag := label.new(bar_index, tp1Price, 'TP1', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 60), textcolor=color.white, size=size.tiny)
                currentSetup.tp2Tag := label.new(bar_index, tp2Price, 'TP2', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 50), textcolor=color.white, size=size.tiny)
                currentSetup.tp3Tag := na
                
                labelText = '⚡ QUICK BUY\n━━━━━━━━━━\nEntry: ' + str.tostring(entryPrice, '#.##') + '\nSL: ' + str.tostring(slPrice, '#.##') + '\nTP1: ' + str.tostring(tp1Price, '#.##') + ' (' + str.tostring(quickRR1) + 'R)\nTP2: ' + str.tostring(tp2Price, '#.##') + ' (' + str.tostring(quickRR2) + 'R)'
                currentSetup.setupLabel := label.new(bar_index, low, labelText, style=label.style_label_up, color=quickColor, textcolor=color.black, size=size.normal)
                
                lastQuickBar := bar_index
                quickCountToday += 1
    
    // BEARISH QUICK
    quickShortPre = currentZone == 'PREMIUM' and boundaryOKSell and trend == -1 and okCooldownQuick and okDailyQuick
    
    if quickShortPre
        hasEngulfing = isBearishEngulfing()
        hasRejection = isBearishRejection(minWickRatio)
        hasLiqSweep = isBearishLiquiditySweep()
        
        bodySize = math.abs(close - open)
        bodyOK = atr14 > 0 ? bodySize >= quickMinBodyATR * atr14 : true
        
        baseSignal = false
        if quickRequireBoth
            baseSignal := hasEngulfing and hasLiqSweep
        else if requireEngulfing
            baseSignal := hasEngulfing
        else
            baseSignal := hasEngulfing or (hasRejection and hasLiqSweep)
        
        quickShortCondition = baseSignal and bodyOK and (not quickUseOB or inBearishOB) and (not quickUseFVG or displacementBear)
        
        if quickShortCondition
            entryPrice = close
            slPrice = high + (high - low) * 0.2
            riskPips = slPrice - entryPrice
            
            if riskPips > 0
                tp1Price = entryPrice - (riskPips * quickRR1)
                tp2Price = entryPrice - (riskPips * quickRR2)
                
                currentSetup := TradeSetup.new()
                currentMovedToBE := false
                currentSetup.entry := entryPrice
                currentSetup.sl := slPrice
                currentSetup.tp1 := tp1Price
                currentSetup.tp2 := tp2Price
                currentSetup.tp3 := na
                currentSetup.isBullish := false
                currentSetup.setupBar := bar_index
                currentSetup.quality := '⚡ QUICK'
                currentSetup.winProb := 55.0
                currentSetup.active := true
                currentSetup.isQuick := true
                currentSetup.setupType := '⚡ QUICK'
                currentSetup.modeName := 'Quick'
                currentSetup.parentLegId := legId
                currentSetup.movedToBE := false
                
                projWidth = 30
                quickColor = color.new(color.yellow, 0)
                currentSetup.entryLine := line.new(bar_index, entryPrice, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, color=quickColor, width=2)
                currentSetup.slLine := line.new(bar_index, slPrice, bar_index + projWidth, slPrice, xloc=xloc.bar_index, color=bearColor, width=2, style=line.style_dashed)
                currentSetup.tp1Line := line.new(bar_index, tp1Price, bar_index + projWidth, tp1Price, xloc=xloc.bar_index, color=bullColor, width=1, style=line.style_dashed)
                currentSetup.tp2Line := line.new(bar_index, tp2Price, bar_index + projWidth, tp2Price, xloc=xloc.bar_index, color=bullColor, width=2, style=line.style_dashed)
                currentSetup.tp3Line := na
                
                currentSetup.riskBox := box.new(bar_index, slPrice, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, bgcolor=color.new(color.orange, 85), border_color=color.new(color.orange, 60))
                currentSetup.rewardBox1 := box.new(bar_index, entryPrice, bar_index + projWidth, tp1Price, xloc=xloc.bar_index, bgcolor=color.new(color.green, 90), border_color=color.new(color.green, 70))
                currentSetup.rewardBox2 := box.new(bar_index, entryPrice, bar_index + projWidth, tp2Price, xloc=xloc.bar_index, bgcolor=color.new(color.green, 92), border_color=color.new(color.green, 80))
                currentSetup.rewardBox3 := na
                
                currentSetup.tp1Tag := label.new(bar_index, tp1Price, 'TP1', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 60), textcolor=color.white, size=size.tiny)
                currentSetup.tp2Tag := label.new(bar_index, tp2Price, 'TP2', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 50), textcolor=color.white, size=size.tiny)
                currentSetup.tp3Tag := na
                
                labelText = '⚡ QUICK SELL\n━━━━━━━━━━\nEntry: ' + str.tostring(entryPrice, '#.##') + '\nSL: ' + str.tostring(slPrice, '#.##') + '\nTP1: ' + str.tostring(tp1Price, '#.##') + ' (' + str.tostring(quickRR1) + 'R)\nTP2: ' + str.tostring(tp2Price, '#.##') + ' (' + str.tostring(quickRR2) + 'R)'
                currentSetup.setupLabel := label.new(bar_index, high, labelText, style=label.style_label_down, color=quickColor, textcolor=color.black, size=size.normal)
                
                lastQuickBar := bar_index
                quickCountToday += 1

// ═════════════════════════════════════════════════════════════════════════════
// SCALP MODE - Internal Structure Continuation
// ═════════════════════════════════════════════════════════════════════════════

if enableScalp and not compatMode and na(currentSetup) and barstate.isconfirmed
    okScalpCooldown = na(statsScalp.lastBar) or bar_index - statsScalp.lastBar >= scalpCooldown
    okScalpDaily = statsScalp.todayCount < scalpMaxPerDay
    
    // Check for internal BOS in last 3 bars
    hasRecentInternalBOSBull = internalTrend == 1 and (ta.crossover(close, internalSwingHigh.level) or ta.crossover(close[1], internalSwingHigh.level[1]) or ta.crossover(close[2], internalSwingHigh.level[2]))
    hasRecentInternalBOSBear = internalTrend == -1 and (ta.crossunder(close, internalSwingLow.level) or ta.crossunder(close[1], internalSwingLow.level[1]) or ta.crossunder(close[2], internalSwingLow.level[2]))
    
    prevBodySize = math.abs(close[1] - open[1])
    currBodySize = math.abs(close - open)
    
    strongPrevBody = atr14 > 0 and prevBodySize >= 0.8 * atr14
    smallCurrBody = atr14 > 0 and currBodySize <= 0.4 * atr14
    
    // BULLISH SCALP
    scalpLongPre = htfBullish and hasRecentInternalBOSBull and currentZone != 'PREMIUM' and okScalpCooldown and okScalpDaily
    scalpLongPattern = strongPrevBody and smallCurrBody and close > ema20
    
    if scalpIgnoreHTF and not htfBullish and internalTrend == 1
        scalpLongPre := hasRecentInternalBOSBull and currentZone != 'PREMIUM' and okScalpCooldown and okScalpDaily
    
    if scalpOnlyTrendZones and currentZone == 'PREMIUM'
        scalpLongPre := false
    
    if scalpLongPre and scalpLongPattern
        entryPrice = high
        slPrice = entryPrice - (scalpATRMult * atr14)
        riskPips = entryPrice - slPrice
        
        if riskPips > 0
            tp1Price = entryPrice + (riskPips * scalpRR1)
            tp2Price = entryPrice + (riskPips * scalpRR2)
            
            currentSetup := TradeSetup.new()
            currentMovedToBE := false
            currentSetup.entry := entryPrice
            currentSetup.sl := slPrice
            currentSetup.tp1 := tp1Price
            currentSetup.tp2 := tp2Price
            currentSetup.tp3 := na
            currentSetup.isBullish := true
            currentSetup.setupBar := bar_index
            currentSetup.quality := 'SCALP'
            currentSetup.winProb := 60.0
            currentSetup.active := true
            currentSetup.isQuick := false
            currentSetup.setupType := '🔥 SCALP'
            currentSetup.modeName := 'Scalp'
            currentSetup.parentLegId := legId
            currentSetup.movedToBE := false
            
            projWidth = 30
            scalpColor = color.new(color.aqua, 0)
            currentSetup.entryLine := line.new(bar_index, entryPrice, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, color=scalpColor, width=2)
            currentSetup.slLine := line.new(bar_index, slPrice, bar_index + projWidth, slPrice, xloc=xloc.bar_index, color=bearColor, width=2, style=line.style_dashed)
            currentSetup.tp1Line := line.new(bar_index, tp1Price, bar_index + projWidth, tp1Price, xloc=xloc.bar_index, color=bullColor, width=1, style=line.style_dashed)
            currentSetup.tp2Line := line.new(bar_index, tp2Price, bar_index + projWidth, tp2Price, xloc=xloc.bar_index, color=bullColor, width=2, style=line.style_dashed)
            currentSetup.tp3Line := na
            
            currentSetup.riskBox := box.new(bar_index, entryPrice, bar_index + projWidth, slPrice, xloc=xloc.bar_index, bgcolor=color.new(color.orange, 85), border_color=color.new(color.orange, 60))
            currentSetup.rewardBox1 := box.new(bar_index, tp1Price, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, bgcolor=color.new(color.green, 90), border_color=color.new(color.green, 70))
            currentSetup.rewardBox2 := box.new(bar_index, tp2Price, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, bgcolor=color.new(color.green, 92), border_color=color.new(color.green, 80))
            currentSetup.rewardBox3 := na
            
            currentSetup.tp1Tag := label.new(bar_index, tp1Price, 'TP1', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 60), textcolor=color.white, size=size.tiny)
            currentSetup.tp2Tag := label.new(bar_index, tp2Price, 'TP2', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 50), textcolor=color.white, size=size.tiny)
            currentSetup.tp3Tag := na
            
            labelText = '🔥 SCALP BUY\n━━━━━━━━━━\nEntry: ' + str.tostring(entryPrice, '#.##') + '\nSL: ' + str.tostring(slPrice, '#.##') + '\nTP1: ' + str.tostring(tp1Price, '#.##') + ' (' + str.tostring(scalpRR1) + 'R)\nTP2: ' + str.tostring(tp2Price, '#.##') + ' (' + str.tostring(scalpRR2) + 'R)'
            currentSetup.setupLabel := label.new(bar_index, low, labelText, style=label.style_label_up, color=scalpColor, textcolor=color.white, size=size.small)
            
            statsScalp.lastBar := bar_index
            statsScalp.todayCount += 1
    
    // BEARISH SCALP
    scalpShortPre = htfBearish and hasRecentInternalBOSBear and currentZone != 'DISCOUNT' and okScalpCooldown and okScalpDaily
    scalpShortPattern = strongPrevBody and smallCurrBody and close < ema20
    
    if scalpIgnoreHTF and not htfBearish and internalTrend == -1
        scalpShortPre := hasRecentInternalBOSBear and currentZone != 'DISCOUNT' and okScalpCooldown and okScalpDaily
    
    if scalpOnlyTrendZones and currentZone == 'DISCOUNT'
        scalpShortPre := false
    
    if scalpShortPre and scalpShortPattern
        entryPrice = low
        slPrice = entryPrice + (scalpATRMult * atr14)
        riskPips = slPrice - entryPrice
        
        if riskPips > 0
            tp1Price = entryPrice - (riskPips * scalpRR1)
            tp2Price = entryPrice - (riskPips * scalpRR2)
            
            currentSetup := TradeSetup.new()
            currentMovedToBE := false
            currentSetup.entry := entryPrice
            currentSetup.sl := slPrice
            currentSetup.tp1 := tp1Price
            currentSetup.tp2 := tp2Price
            currentSetup.tp3 := na
            currentSetup.isBullish := false
            currentSetup.setupBar := bar_index
            currentSetup.quality := 'SCALP'
            currentSetup.winProb := 60.0
            currentSetup.active := true
            currentSetup.isQuick := false
            currentSetup.setupType := '🔥 SCALP'
            currentSetup.modeName := 'Scalp'
            currentSetup.parentLegId := legId
            currentSetup.movedToBE := false
            
            projWidth = 30
            scalpColor = color.new(color.aqua, 0)
            currentSetup.entryLine := line.new(bar_index, entryPrice, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, color=scalpColor, width=2)
            currentSetup.slLine := line.new(bar_index, slPrice, bar_index + projWidth, slPrice, xloc=xloc.bar_index, color=bearColor, width=2, style=line.style_dashed)
            currentSetup.tp1Line := line.new(bar_index, tp1Price, bar_index + projWidth, tp1Price, xloc=xloc.bar_index, color=bullColor, width=1, style=line.style_dashed)
            currentSetup.tp2Line := line.new(bar_index, tp2Price, bar_index + projWidth, tp2Price, xloc=xloc.bar_index, color=bullColor, width=2, style=line.style_dashed)
            currentSetup.tp3Line := na
            
            currentSetup.riskBox := box.new(bar_index, slPrice, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, bgcolor=color.new(color.orange, 85), border_color=color.new(color.orange, 60))
            currentSetup.rewardBox1 := box.new(bar_index, entryPrice, bar_index + projWidth, tp1Price, xloc=xloc.bar_index, bgcolor=color.new(color.green, 90), border_color=color.new(color.green, 70))
            currentSetup.rewardBox2 := box.new(bar_index, entryPrice, bar_index + projWidth, tp2Price, xloc=xloc.bar_index, bgcolor=color.new(color.green, 92), border_color=color.new(color.green, 80))
            currentSetup.rewardBox3 := na
            
            currentSetup.tp1Tag := label.new(bar_index, tp1Price, 'TP1', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 60), textcolor=color.white, size=size.tiny)
            currentSetup.tp2Tag := label.new(bar_index, tp2Price, 'TP2', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 50), textcolor=color.white, size=size.tiny)
            currentSetup.tp3Tag := na
            
            labelText = '🔥 SCALP SELL\n━━━━━━━━━━\nEntry: ' + str.tostring(entryPrice, '#.##') + '\nSL: ' + str.tostring(slPrice, '#.##') + '\nTP1: ' + str.tostring(tp1Price, '#.##') + ' (' + str.tostring(scalpRR1) + 'R)\nTP2: ' + str.tostring(tp2Price, '#.##') + ' (' + str.tostring(scalpRR2) + 'R)'
            currentSetup.setupLabel := label.new(bar_index, high, labelText, style=label.style_label_down, color=scalpColor, textcolor=color.white, size=size.small)
            
            statsScalp.lastBar := bar_index
            statsScalp.todayCount += 1

// ═════════════════════════════════════════════════════════════════════════════
// REVERSAL SNIPER MODE - CHoCH + Retest
// ═════════════════════════════════════════════════════════════════════════════

if enableReversal and not compatMode and na(currentSetup) and barstate.isconfirmed
    okRevCooldown = na(statsReversal.lastBar) or bar_index - statsReversal.lastBar >= revCooldown
    okRevDaily = statsReversal.todayCount < revMaxPerDay
    
    // Detect CHoCH (trend reversal BOS)
    chochBullish = trend == 1 and ta.crossover(close, swingHigh.level) and trend[1] == -1
    chochBearish = trend == -1 and ta.crossunder(close, swingLow.level) and trend[1] == 1
    
    // Retest tolerance
    retestToleranceBull = not na(swingHigh.level) and math.abs(close - swingHigh.level) <= 0.2 * atr14
    retestToleranceBear = not na(swingLow.level) and math.abs(close - swingLow.level) <= 0.2 * atr14
    
    // RSI Divergence (optional)
    rsiDiv_bull = false
    rsiDiv_bear = false
    
    if revUseRSIDiv
        lookback = 20
        priceLL = low < ta.lowest(low[1], lookback)
        rsiHL = rsi14 > ta.lowest(rsi14[1], lookback)
        rsiDiv_bull := priceLL and rsiHL
        
        priceHH = high > ta.highest(high[1], lookback)
        rsiLH = rsi14 < ta.highest(rsi14[1], lookback)
        rsiDiv_bear := priceHH and rsiLH
    
    // BULLISH REVERSAL
    revLongCondition = (chochBullish or (trend == 1 and retestToleranceBull)) and htfMixed and okRevCooldown and okRevDaily
    if revUseRSIDiv
        revLongCondition := revLongCondition and rsiDiv_bull
    
    if revLongCondition
        entryPrice = close
        slPrice = entryPrice - (revATRMult * atr14)
        riskPips = entryPrice - slPrice
        
        if riskPips > 0
            tp1Price = entryPrice + (riskPips * revRR1)
            tp2Price = entryPrice + (riskPips * revRR2)
            
            currentSetup := TradeSetup.new()
            currentMovedToBE := false
            currentSetup.entry := entryPrice
            currentSetup.sl := slPrice
            currentSetup.tp1 := tp1Price
            currentSetup.tp2 := tp2Price
            currentSetup.tp3 := na
            currentSetup.isBullish := true
            currentSetup.setupBar := bar_index
            currentSetup.quality := 'REVERSAL'
            currentSetup.winProb := 65.0
            currentSetup.active := true
            currentSetup.isQuick := false
            currentSetup.setupType := '🔄 REVERSAL'
            currentSetup.modeName := 'Reversal'
            currentSetup.parentLegId := legId
            currentSetup.movedToBE := false
            
            projWidth = 35
            revColor = color.new(color.purple, 0)
            currentSetup.entryLine := line.new(bar_index, entryPrice, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, color=revColor, width=2)
            currentSetup.slLine := line.new(bar_index, slPrice, bar_index + projWidth, slPrice, xloc=xloc.bar_index, color=bearColor, width=2, style=line.style_dashed)
            currentSetup.tp1Line := line.new(bar_index, tp1Price, bar_index + projWidth, tp1Price, xloc=xloc.bar_index, color=bullColor, width=1, style=line.style_dashed)
            currentSetup.tp2Line := line.new(bar_index, tp2Price, bar_index + projWidth, tp2Price, xloc=xloc.bar_index, color=bullColor, width=2, style=line.style_dashed)
            currentSetup.tp3Line := na
            
            currentSetup.riskBox := box.new(bar_index, entryPrice, bar_index + projWidth, slPrice, xloc=xloc.bar_index, bgcolor=color.new(color.orange, 85), border_color=color.new(color.orange, 60))
            currentSetup.rewardBox1 := box.new(bar_index, tp1Price, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, bgcolor=color.new(color.green, 90), border_color=color.new(color.green, 70))
            currentSetup.rewardBox2 := box.new(bar_index, tp2Price, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, bgcolor=color.new(color.green, 92), border_color=color.new(color.green, 80))
            currentSetup.rewardBox3 := na
            
            currentSetup.tp1Tag := label.new(bar_index, tp1Price, 'TP1', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 60), textcolor=color.white, size=size.tiny)
            currentSetup.tp2Tag := label.new(bar_index, tp2Price, 'TP2', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 50), textcolor=color.white, size=size.tiny)
            currentSetup.tp3Tag := na
            
            labelText = '🔄 REV BUY\n━━━━━━━━━━\nEntry: ' + str.tostring(entryPrice, '#.##') + '\nSL: ' + str.tostring(slPrice, '#.##') + '\nTP1: ' + str.tostring(tp1Price, '#.##') + ' (' + str.tostring(revRR1) + 'R)\nTP2: ' + str.tostring(tp2Price, '#.##') + ' (' + str.tostring(revRR2) + 'R)\nCHoCH Retest'
            currentSetup.setupLabel := label.new(bar_index, low, labelText, style=label.style_label_up, color=revColor, textcolor=color.white, size=size.small)
            
            statsReversal.lastBar := bar_index
            statsReversal.todayCount += 1
    
    // BEARISH REVERSAL
    revShortCondition = (chochBearish or (trend == -1 and retestToleranceBear)) and htfMixed and okRevCooldown and okRevDaily
    if revUseRSIDiv
        revShortCondition := revShortCondition and rsiDiv_bear
    
    if revShortCondition
        entryPrice = close
        slPrice = entryPrice + (revATRMult * atr14)
        riskPips = slPrice - entryPrice
        
        if riskPips > 0
            tp1Price = entryPrice - (riskPips * revRR1)
            tp2Price = entryPrice - (riskPips * revRR2)
            
            currentSetup := TradeSetup.new()
            currentMovedToBE := false
            currentSetup.entry := entryPrice
            currentSetup.sl := slPrice
            currentSetup.tp1 := tp1Price
            currentSetup.tp2 := tp2Price
            currentSetup.tp3 := na
            currentSetup.isBullish := false
            currentSetup.setupBar := bar_index
            currentSetup.quality := 'REVERSAL'
            currentSetup.winProb := 65.0
            currentSetup.active := true
            currentSetup.isQuick := false
            currentSetup.setupType := '🔄 REVERSAL'
            currentSetup.modeName := 'Reversal'
            currentSetup.parentLegId := legId
            currentSetup.movedToBE := false
            
            projWidth = 35
            revColor = color.new(color.purple, 0)
            currentSetup.entryLine := line.new(bar_index, entryPrice, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, color=revColor, width=2)
            currentSetup.slLine := line.new(bar_index, slPrice, bar_index + projWidth, slPrice, xloc=xloc.bar_index, color=bearColor, width=2, style=line.style_dashed)
            currentSetup.tp1Line := line.new(bar_index, tp1Price, bar_index + projWidth, tp1Price, xloc=xloc.bar_index, color=bullColor, width=1, style=line.style_dashed)
            currentSetup.tp2Line := line.new(bar_index, tp2Price, bar_index + projWidth, tp2Price, xloc=xloc.bar_index, color=bullColor, width=2, style=line.style_dashed)
            currentSetup.tp3Line := na
            
            currentSetup.riskBox := box.new(bar_index, slPrice, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, bgcolor=color.new(color.orange, 85), border_color=color.new(color.orange, 60))
            currentSetup.rewardBox1 := box.new(bar_index, entryPrice, bar_index + projWidth, tp1Price, xloc=xloc.bar_index, bgcolor=color.new(color.green, 90), border_color=color.new(color.green, 70))
            currentSetup.rewardBox2 := box.new(bar_index, entryPrice, bar_index + projWidth, tp2Price, xloc=xloc.bar_index, bgcolor=color.new(color.green, 92), border_color=color.new(color.green, 80))
            currentSetup.rewardBox3 := na
            
            currentSetup.tp1Tag := label.new(bar_index, tp1Price, 'TP1', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 60), textcolor=color.white, size=size.tiny)
            currentSetup.tp2Tag := label.new(bar_index, tp2Price, 'TP2', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 50), textcolor=color.white, size=size.tiny)
            currentSetup.tp3Tag := na
            
            labelText = '🔄 REV SELL\n━━━━━━━━━━\nEntry: ' + str.tostring(entryPrice, '#.##') + '\nSL: ' + str.tostring(slPrice, '#.##') + '\nTP1: ' + str.tostring(tp1Price, '#.##') + ' (' + str.tostring(revRR1) + 'R)\nTP2: ' + str.tostring(tp2Price, '#.##') + ' (' + str.tostring(revRR2) + 'R)\nCHoCH Retest'
            currentSetup.setupLabel := label.new(bar_index, high, labelText, style=label.style_label_down, color=revColor, textcolor=color.white, size=size.small)
            
            statsReversal.lastBar := bar_index
            statsReversal.todayCount += 1

// ═════════════════════════════════════════════════════════════════════════════
// MOMENTUM CONTINUATION MODE - EMA20 Pullback Add-ons
// ═════════════════════════════════════════════════════════════════════════════

if enableMomentum and not compatMode and na(currentSetup) and barstate.isconfirmed
    okMomAddOns = momAddOnsThisLeg < momAddOnsPerLeg
    
    // Recent Major BOS
    recentBOSBull = trend == 1 and ta.barssince(ta.crossover(close, swingHigh.level)) <= 30
    recentBOSBear = trend == -1 and ta.barssince(ta.crossunder(close, swingLow.level)) <= 30
    
    // Pullback to EMA20
    pullbackBull = low <= ema20 and low[1] > ema20[1]
    pullbackBear = high >= ema20 and high[1] < ema20[1]
    
    // Continuation BOS (internal)
    contBullish = internalTrend == 1 and close > ema20
    contBearish = internalTrend == -1 and close < ema20
    
    // BULLISH MOMENTUM
    momLongCondition = recentBOSBull and pullbackBull and contBullish and okMomAddOns
    
    if momLongCondition
        entryPrice = close
        slPrice = entryPrice - (momATRMult * atr14)
        riskPips = entryPrice - slPrice
        
        if riskPips > 0
            tp1Price = entryPrice + (riskPips * momRR1)
            tp2Price = entryPrice + (riskPips * momRR2)
            
            currentSetup := TradeSetup.new()
            currentMovedToBE := false
            currentSetup.entry := entryPrice
            currentSetup.sl := slPrice
            currentSetup.tp1 := tp1Price
            currentSetup.tp2 := tp2Price
            currentSetup.tp3 := na
            currentSetup.isBullish := true
            currentSetup.setupBar := bar_index
            currentSetup.quality := 'MOMENTUM'
            currentSetup.winProb := 70.0
            currentSetup.active := true
            currentSetup.isQuick := false
            currentSetup.setupType := '🌊 MOMENTUM'
            currentSetup.modeName := 'Momentum'
            currentSetup.parentLegId := legId
            currentSetup.movedToBE := false
            
            projWidth = 35
            momColor = color.new(color.blue, 0)
            currentSetup.entryLine := line.new(bar_index, entryPrice, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, color=momColor, width=2)
            currentSetup.slLine := line.new(bar_index, slPrice, bar_index + projWidth, slPrice, xloc=xloc.bar_index, color=bearColor, width=2, style=line.style_dashed)
            currentSetup.tp1Line := line.new(bar_index, tp1Price, bar_index + projWidth, tp1Price, xloc=xloc.bar_index, color=bullColor, width=1, style=line.style_dashed)
            currentSetup.tp2Line := line.new(bar_index, tp2Price, bar_index + projWidth, tp2Price, xloc=xloc.bar_index, color=bullColor, width=2, style=line.style_dashed)
            currentSetup.tp3Line := na
            
            currentSetup.riskBox := box.new(bar_index, entryPrice, bar_index + projWidth, slPrice, xloc=xloc.bar_index, bgcolor=color.new(color.orange, 85), border_color=color.new(color.orange, 60))
            currentSetup.rewardBox1 := box.new(bar_index, tp1Price, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, bgcolor=color.new(color.green, 90), border_color=color.new(color.green, 70))
            currentSetup.rewardBox2 := box.new(bar_index, tp2Price, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, bgcolor=color.new(color.green, 92), border_color=color.new(color.green, 80))
            currentSetup.rewardBox3 := na
            
            currentSetup.tp1Tag := label.new(bar_index, tp1Price, 'TP1', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 60), textcolor=color.white, size=size.tiny)
            currentSetup.tp2Tag := label.new(bar_index, tp2Price, 'TP2', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 50), textcolor=color.white, size=size.tiny)
            currentSetup.tp3Tag := na
            
            labelText = '🌊 MOM BUY\n━━━━━━━━━━\nEntry: ' + str.tostring(entryPrice, '#.##') + '\nSL: ' + str.tostring(slPrice, '#.##') + '\nTP1: ' + str.tostring(tp1Price, '#.##') + ' (' + str.tostring(momRR1) + 'R)\nTP2: ' + str.tostring(tp2Price, '#.##') + ' (' + str.tostring(momRR2) + 'R)\nEMA20 Add-On'
            currentSetup.setupLabel := label.new(bar_index, low, labelText, style=label.style_label_up, color=momColor, textcolor=color.white, size=size.small)
            
            momAddOnsThisLeg += 1
    
    // BEARISH MOMENTUM
    momShortCondition = recentBOSBear and pullbackBear and contBearish and okMomAddOns
    
    if momShortCondition
        entryPrice = close
        slPrice = entryPrice + (momATRMult * atr14)
        riskPips = slPrice - entryPrice
        
        if riskPips > 0
            tp1Price = entryPrice - (riskPips * momRR1)
            tp2Price = entryPrice - (riskPips * momRR2)
            
            currentSetup := TradeSetup.new()
            currentMovedToBE := false
            currentSetup.entry := entryPrice
            currentSetup.sl := slPrice
            currentSetup.tp1 := tp1Price
            currentSetup.tp2 := tp2Price
            currentSetup.tp3 := na
            currentSetup.isBullish := false
            currentSetup.setupBar := bar_index
            currentSetup.quality := 'MOMENTUM'
            currentSetup.winProb := 70.0
            currentSetup.active := true
            currentSetup.isQuick := false
            currentSetup.setupType := '🌊 MOMENTUM'
            currentSetup.modeName := 'Momentum'
            currentSetup.parentLegId := legId
            currentSetup.movedToBE := false
            
            projWidth = 35
            momColor = color.new(color.blue, 0)
            currentSetup.entryLine := line.new(bar_index, entryPrice, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, color=momColor, width=2)
            currentSetup.slLine := line.new(bar_index, slPrice, bar_index + projWidth, slPrice, xloc=xloc.bar_index, color=bearColor, width=2, style=line.style_dashed)
            currentSetup.tp1Line := line.new(bar_index, tp1Price, bar_index + projWidth, tp1Price, xloc=xloc.bar_index, color=bullColor, width=1, style=line.style_dashed)
            currentSetup.tp2Line := line.new(bar_index, tp2Price, bar_index + projWidth, tp2Price, xloc=xloc.bar_index, color=bullColor, width=2, style=line.style_dashed)
            currentSetup.tp3Line := na
            
            currentSetup.riskBox := box.new(bar_index, slPrice, bar_index + projWidth, entryPrice, xloc=xloc.bar_index, bgcolor=color.new(color.orange, 85), border_color=color.new(color.orange, 60))
            currentSetup.rewardBox1 := box.new(bar_index, entryPrice, bar_index + projWidth, tp1Price, xloc=xloc.bar_index, bgcolor=color.new(color.green, 90), border_color=color.new(color.green, 70))
            currentSetup.rewardBox2 := box.new(bar_index, entryPrice, bar_index + projWidth, tp2Price, xloc=xloc.bar_index, bgcolor=color.new(color.green, 92), border_color=color.new(color.green, 80))
            currentSetup.rewardBox3 := na
            
            currentSetup.tp1Tag := label.new(bar_index, tp1Price, 'TP1', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 60), textcolor=color.white, size=size.tiny)
            currentSetup.tp2Tag := label.new(bar_index, tp2Price, 'TP2', xloc=xloc.bar_index, style=label.style_label_left, color=color.new(color.green, 50), textcolor=color.white, size=size.tiny)
            currentSetup.tp3Tag := na
            
            labelText = '🌊 MOM SELL\n━━━━━━━━━━\nEntry: ' + str.tostring(entryPrice, '#.##') + '\nSL: ' + str.tostring(slPrice, '#.##') + '\nTP1: ' + str.tostring(tp1Price, '#.##') + ' (' + str.tostring(momRR1) + 'R)\nTP2: ' + str.tostring(tp2Price, '#.##') + ' (' + str.tostring(momRR2) + 'R)\nEMA20 Add-On'
            currentSetup.setupLabel := label.new(bar_index, high, labelText, style=label.style_label_down, color=momColor, textcolor=color.white, size=size.small)
            
            momAddOnsThisLeg += 1

// ═════════════════════════════════════════════════════════════════════════════
// DASHBOARD - Live Status Table
// ═════════════════════════════════════════════════════════════════════════════

var table dashboard = table.new(position.top_right, 2, 10, border_width=1)

if barstate.islast
    table.clear(dashboard, 0, 0, 1, 9)
    
    // Header
    table.cell(dashboard, 0, 0, 'MTF-SMC Status', text_color=color.white, bgcolor=color.new(color.gray, 20), text_size=size.normal)
    table.cell(dashboard, 1, 0, '', text_color=color.white, bgcolor=color.new(color.gray, 20))
    
    // Zone
    zoneColor = currentZone == 'DISCOUNT' ? color.new(color.green, 60) : currentZone == 'PREMIUM' ? color.new(color.red, 60) : color.new(color.gray, 60)
    table.cell(dashboard, 0, 1, 'Zone', text_color=color.white, bgcolor=color.new(color.gray, 40))
    table.cell(dashboard, 1, 1, currentZone, text_color=color.white, bgcolor=zoneColor)
    
    // Trend
    trendLabel = trend == 1 ? 'BULLISH' : trend == -1 ? 'BEARISH' : 'NEUTRAL'
    trendColor = trend == 1 ? color.new(color.green, 60) : trend == -1 ? color.new(color.red, 60) : color.new(color.gray, 60)
    table.cell(dashboard, 0, 2, 'Trend', text_color=color.white, bgcolor=color.new(color.gray, 40))
    table.cell(dashboard, 1, 2, trendLabel, text_color=color.white, bgcolor=trendColor)
    
    // HTF Bias
    biasLabel = htfBullish ? 'BULLISH' : htfBearish ? 'BEARISH' : 'MIXED'
    biasColor = htfBullish ? color.new(color.green, 60) : htfBearish ? color.new(color.red, 60) : color.new(color.gray, 60)
    table.cell(dashboard, 0, 3, 'HTF Bias', text_color=color.white, bgcolor=color.new(color.gray, 40))
    table.cell(dashboard, 1, 3, biasLabel, text_color=color.white, bgcolor=biasColor)
    
    // Structure
    structureLabel = (trend == 1 or trend == -1) ? 'BOS ✓' : 'Waiting'
    structureColor = (trend == 1 or trend == -1) ? color.new(color.green, 60) : color.new(color.orange, 60)
    table.cell(dashboard, 0, 4, 'Structure', text_color=color.white, bgcolor=color.new(color.gray, 40))
    table.cell(dashboard, 1, 4, structureLabel, text_color=color.white, bgcolor=structureColor)
    
    // Order Block
    obLabel = inBullishOB ? 'Bull OB' : inBearishOB ? 'Bear OB' : 'None'
    obColor = inBullishOB ? color.new(color.green, 60) : inBearishOB ? color.new(color.red, 60) : color.new(color.gray, 60)
    extremeLabel = inExtremeOB_bull ? ' [EXT]' : inExtremeOB_bear ? ' [EXT]' : ''
    table.cell(dashboard, 0, 5, 'Order Block', text_color=color.white, bgcolor=color.new(color.gray, 40))
    table.cell(dashboard, 1, 5, obLabel + extremeLabel, text_color=color.white, bgcolor=obColor)
    
    // Quality
    table.cell(dashboard, 0, 6, 'Quality', text_color=color.white, bgcolor=color.new(color.gray, 40))
    table.cell(dashboard, 1, 6, setupQuality, text_color=color.white, bgcolor=color.new(color.blue, 60))
    
    // Active Mode
    activeMode = 'Ready'
    activeModeColor = color.new(color.gray, 60)
    if not na(currentSetup)
        if currentSetup.active
            activeMode := currentSetup.setupType
            activeModeColor := color.new(color.yellow, 40)
    table.cell(dashboard, 0, 7, 'Active Mode', text_color=color.white, bgcolor=color.new(color.gray, 40))
    table.cell(dashboard, 1, 7, activeMode, text_color=color.white, bgcolor=activeModeColor)
    
    // Win Rate
    winRateLabel = str.tostring(winRate, '#.#') + '%'
    table.cell(dashboard, 0, 8, 'Win Rate', text_color=color.white, bgcolor=color.new(color.gray, 40))
    table.cell(dashboard, 1, 8, winRateLabel, text_color=color.white, bgcolor=color.new(color.green, 60))
    
    // Break-Even Status
    beLabel = 'Awaiting'
    beColor = color.new(color.gray, 60)
    if not na(currentSetup)
        if currentSetup.movedToBE
            beLabel := 'BE ✓'
            beColor := color.new(color.green, 60)
    table.cell(dashboard, 0, 9, 'Break-Even', text_color=color.white, bgcolor=color.new(color.gray, 40))
    table.cell(dashboard, 1, 9, beLabel, text_color=color.white, bgcolor=beColor)

// ═════════════════════════════════════════════════════════════════════════════
// ALERTS
// ═════════════════════════════════════════════════════════════════════════════

if showAlerts
    // Entry alerts
    if not na(currentSetup)
        if currentSetup.setupBar == bar_index and barstate.isconfirmed
            alert('🚀 ' + currentSetup.setupType + ' ENTRY\n' + (currentSetup.isBullish ? 'BUY' : 'SELL') + ' @ ' + str.tostring(currentSetup.entry) + '\nSL: ' + str.tostring(currentSetup.sl) + '\nTP1: ' + str.tostring(currentSetup.tp1) + '\nTP2: ' + str.tostring(currentSetup.tp2), alert.freq_once_per_bar_close)
    
    // Break-even alert
    if not na(currentSetup)
        if currentMovedToBE and not currentMovedToBE[1]
            alert('🎯 MOVE TO BREAK-EVEN\n' + currentSetup.setupType + ' TP1 HIT\nMove SL to Entry: ' + str.tostring(currentSetup.entry), alert.freq_once_per_bar)
    
    // Zone alerts
    if currentZone == 'DISCOUNT' and currentZone[1] != 'DISCOUNT'
        alert('🟢 DISCOUNT Zone Entered\nLook for LONG setups', alert.freq_once_per_bar_close)
    
    if currentZone == 'PREMIUM' and currentZone[1] != 'PREMIUM'
        alert('🔴 PREMIUM Zone Entered\nLook for SHORT setups', alert.freq_once_per_bar_close)
    
    // Structure alerts
    if trend == 1 and trend[1] != 1
        alert('📈 Bullish BOS Confirmed\nUptrend structure', alert.freq_once_per_bar_close)
    
    if trend == -1 and trend[1] != -1
        alert('📉 Bearish BOS Confirmed\nDowntrend structure', alert.freq_once_per_bar_close)

// ═════════════════════════════════════════════════════════════════════════════
// PLOT OVERLAYS (Optional indicators on chart)
// ═════════════════════════════════════════════════════════════════════════════

plot(ema20, 'EMA 20', color=color.new(color.yellow, 40), linewidth=1)
plot(ema50, 'EMA 50', color=color.new(color.orange, 40), linewidth=1)
